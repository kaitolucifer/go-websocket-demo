<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.css"
          integrity="sha512-UrjLcAek5jbj1vwGbXkviPHtgSNVNQCedX7cBIMDdSI2iZtUcZcoTh2Sqc8R9mVcijOjFUi1IlxhfrE1uWaIog=="
          crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        .chatbox {
            min-height: 160px;
            padding: 0.5em;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-dark bg-dark">
        <div class="container-fluid">
          <span class="navbar-brand mb-0 h1">WebSocket Chat Room</span>
        </div>
    </nav>
    <div class="container">
        <div class="row mt-3">
            <div class="col-md-6">
                <h3>Chat Form</h3>
                <div class="mb-3 row">
                    <lable class="col-sm-2 col-form-label" for="username">Username</lable>
                    <div class="col-sm-10">
                        <input type="text" name="username" id="username" class="form-control" autocomplete="off">
                    </div>
                </div>

                <div class="mb-3 row">
                    <lable class="col-sm-2 col-form-label" for="message">Message</lable>
                    <div class="col-sm-10">
                        <input type="text" name="message" id="message" class="form-control" autocomplete="off">
                    </div>
                </div>

                <a href="javascript:void(0);" class="btn btn-secondary mt-3" id="send">Send Message</a>

                <input type="hidden" name="action" id="action">

                <div id="status" class="mt-4 float-end">

                </div>

                <div class="mb-3 row mt-3">
                    <lable class="col-sm-2 col-form-label" for="message">Dialog</lable>
                    <div class="col-sm-10">
                        <div id="output" class="chatbox form-control" autocomplete="off"></div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <h3>Online Users</h3>
                <ul class="list-group" id="online_users">

                </ul>
            </div>
        </div>
    </div>
</body>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW"
        crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.js"
        integrity="sha512-NHRCwRf2LnVSlLDejCA9oS3fG3/FLSQIPCjAWl3M7tVi5wszwr6FxkjotWnQDXLE+aLKcxRrzFDNEgXj9nvkPw=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="/static/reconnecting-websocket.min.js"></script>
<script>
    let socket = null;
    const output = document.getElementById("output");
    const username = document.getElementById("username");
    const message = document.getElementById("message");

    window.onbeforeunload = function() {
        console.log("leaving");
        let jsonData = {};
        jsonData["action"] = "user_left";
        socket.send(JSON.stringify(jsonData));
    }

    document.addEventListener("DOMContentLoaded", function() {
        socket = new ReconnectingWebSocket("ws://127.0.0.1:8080/ws", null, {debug: true, reconnectInterval: 3000});

        const offline = `<span class="badge bg-danger">Not Connected</span>`;
        const online = `<span class="badge bg-success">Connected</span>`;

        const status = document.getElementById("status");

        socket.onopen = () => {
            console.log("successfully connected");
            status.innerHTML = online;
        }

        socket.onclose = () => {
            console.log("connection closed");
            status.innerHTML = offline;
        }

        socket.onerror = error => {
            console.log("there was an error");
            status.innerHTML = offline;
        }

        socket.onmessage = msg => {
            let data = JSON.parse(msg.data);
            console.log("Action is", data.action);
            switch (data.action) {
                case "list_users":
                    const ul = document.getElementById("online_users")
                    while (ul.firstChild) ul.removeChild(ul.firstChild);

                    if (data.connected_users.length > 0) {
                        data.connected_users.forEach(element => {
                            const li = document.createElement("li");
                            li.appendChild(document.createTextNode(element));
                            if (element === username.value) {
                                li.className = "list-group-item list-group-item-dark";
                            } else {
                                li.className = "list-group-item";
                            }
                            ul.appendChild(li);
                        });
                    }
                    break;
                case "broadcast":
                    output.innerHTML = output.innerHTML + data.message + "<br>";
                    break;
            }
        }

        username.addEventListener("change", function() {
            let jsonData = {};
            jsonData["action"] = "username";
            jsonData["username"] = this.value;
            socket.send(JSON.stringify(jsonData));
        })

        document.getElementById("message").addEventListener("keydown", function(event) {
            if (event.code === "Enter") {
                if (!socket) {
                    errorMessage("no connection");
                    return false;
                }

                event.preventDefault();
                event.stopPropagation();

                if (username.value === "" || message.value === "") {
                    errorMessage("username or message is empty");
                    return false
                } else {
                    sendMessage();
                }
            }
        })

        document.getElementById("send").addEventListener("click", function() {
            if (username.value === "" || message.value === "") {
                errorMessage("username or message is empty");
                return false
            } else {
                sendMessage();
            }
        })
    })

    function sendMessage() {
        let jsonData = {};
        jsonData["action"] = "broadcast";
        jsonData["username"] = username.value;
        jsonData["message"] = message.value;
        socket.send(JSON.stringify(jsonData));
        message.value = "";
    }

    function errorMessage(msg) {
        notie.alert({
            type: "error",
            text: msg,
        })
    }
</script>
</html>
